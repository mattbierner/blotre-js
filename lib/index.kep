package Blotre
with
    import 'request-promise' rp,
    import 'extend' extend,
    import 'url' url,
    {stringify parse} = JSON
in {

var DEFAULT_CONF = {
    protocol: 'https',
    host: 'blot.re'
};

var ROOT := "/v0/";
var API_ROOT := ROOT + "api/";
var OAUTH2_ROOT := ROOT + "oauth2/";

var getUrl := \conf options ->
    url.format <| extend(conf, options);

/**
 * Determine if the request failed because the access token is expired.
 */
var isExpiredResponse := \response ->
    response??.statusCode === 401 && let
        challenge = response.headers.('www-authenticate')
    in
        challenge && challenge.match('error="invalid_token"');

/*
 ******************************************************************************/
/**
 * Main Blot're state object.
 */
Blotre := function\client creds conf =self-> {
    self.client = (client || {});
    self.creds = (creds || {});
    self.config = extend(DEFAULT_CONF, (conf || {}));
};

Blotre.create := \client creds conf -> new Blotre(client, creds, conf);

Blotre.prototype.getUrl := \options ={config}->
    getUrl({
        protocol: config.protocol,
        host: config.host
    }, options);

Blotre.prototype.setCreds := \creds =self-> {
    self.creds = creds;
    if (self.config.onCredsChanged)
        self.config.onCredsChanged(self);
};

/* Authorization
 ******************************************************************************/
/**
 * Get the authorization URI for the current client.
 */
Blotre.prototype.getAuthorizationUrl := \=self->
    url.format {
        pathname: self.getUrl { pathname: OAUTH2_ROOT + 'authorize' },
        query: {
            response_type: 'code',
            client_id: self.client.client_id,
            redirect_uri: self.client.redirect_uri
        }
    };

/**
 * Attempt to exchange creds for an access token.
 */
Blotre.prototype.acccessTokenEndpoint := \grantType options =self->
    rp.post({
        uri: self.getUrl { pathname: OAUTH2_ROOT + 'access_token' },
        qs: extend({
            grant_type: grantType,
            client_id: self.client.client_id,
            client_secret: self.client.client_secret,
            redirect_uri: self.client.redirect_uri
        }, options || {})
    })
    .then(parse)
    .catch \ e -> {
        throw extend @ (parse e.response.body) {
            statusCode: e.statusCode
        };
    };

/**
 * Exchange an authorization code for a new access token.
 * 
 * If successful, returns a new Client that uses these credentials.
 */
Blotre.prototype.redeemAuthorizationCode := \code =self->
    self.acccessTokenEndpoint @ 'authorization_code' {
        code: code
    };

/**
 * Attempt to exchange a refresh token for a new access token.
 * 
 * If successful, returns a new Client that uses these credentials.
 */
Blotre.prototype.redeemRefreshToken := \token =self->
    self.acccessTokenEndpoint @ 'refresh_token' {
        refresh_token: (token || self.creds.refresh_token)
    };

/**
 * Attempt to exchange one time code for a new access token.
 * 
 * If successful, returns a new Client that uses these credentials.
 */
Blotre.prototype.redeemOnetimeCode := \code =self->
    self.acccessTokenEndpoint @ 'https://oauth2grant.blot.re/onetime_code' {
        code: (code || self.client.code)
    };

/* Disposable Client
 ******************************************************************************/
/**
 * Create a new disposable client.
 */
Blotre.createDisposable := \clientInfo conf ->
    rp.put({
        uri: getUrl(extend(DEFAULT_CONF, conf || {}), { pathname: OAUTH2_ROOT + 'disposable' }),
        body: stringify clientInfo,
        headers: {
            'accepts': 'application/json',
            'content-type': 'application/json'
        }
    })
    .then(parse \> \data -> new Blotre({
        client_id: data.id,
        client_secret: data.secret,
        code: data.code
    }, null, conf));

/* Requests
 ******************************************************************************/
Blotre.prototype.setAuthHeader := \options =self->
    extend @ options {
        'headers': extend @ options.headers {
            'authorization': ?self.creds
                :'Bearer ' + self.creds.access_token
                :''
        }
    };

/**
 * Make a request.
 * 
 * If the request fails because the access token has expired, attempts to 
 * exchange the refresh token for a new access token.
 */
Blotre.prototype.makeRequest := \options noRetry =self->
    rp(options)
        .then(parse)
        .catch \ e -> {
            if (!noRetry && isExpiredResponse e.response && self.creds.refresh_token) {
                // If we have a refresh_token, attempt to exchange it for new creds
                // and replay the request.
                return self.redeemRefreshToken()
                    .then \ newCreds -> {
                        self.setCreds(newCreds);
                        return self.makeRequest(self.setAuthHeader options, true);
                    };
            } else {
                throw e;
            }
        };

/**
 * GET request.
 */
Blotre.prototype.get := \path options =self->
    self.makeRequest {
        method: "GET",
        uri: self.getUrl { pathname: API_ROOT + path },
        qs: options || {},
        headers: {
            'accepts': 'application/json'
        }
    };

/**
 * POST request.
 */
Blotre.prototype.post := \path body =self->
    self.makeRequest <| self.setAuthHeader {
        method: "POST",
        uri: self.getUrl { pathname: API_ROOT + path },
        headers: {
            'accepts': 'application/json',
            'content-type': 'application/json'
        },
        body: stringify body
    };

/**
 * PUT request.
 */
Blotre.prototype.put := \path body =self->
    self.makeRequest <| self.setAuthHeader {
        method: "PUT",
        uri: self.getUrl { pathname: API_ROOT + path },
        headers: {
            'accepts': 'application/json',
            'content-type': 'application/json'
        },
        body: stringify body
    };

/**
 * DELETE request.
 */
Blotre.prototype.del := \path  =self->
    self.makeRequest {
        method: "DELETE",
        uri: self.getUrl { pathname: API_ROOT + path },
        headers: {
            'accepts': 'application/json'
        }
    };

/* User Operations
 ******************************************************************************/
/**
 * Get a user by id.
 */
Blotre.prototype.getUser := \userId =self->
    self.get <| "user/" + userId;

/* Stream Operations
 ******************************************************************************/
/**
 * Stream lookup.
 */
Blotre.prototype.getStreams := \options =self->
    self.get @ "stream" options;

/**
 * Create a new stream.
 */
Blotre.prototype.createStream := \body =self->
    self.put @ "stream" body;

/**
 * Get a stream.
 */
Blotre.prototype.getStream := \id options =self->
    self.get("stream/" + id, options);

/**
 * Delete an existing stream.
 */
Blotre.prototype.deleteStream := \id =self->
    self.del @ "stream" id;

/**
 * Get the status of a stream.
 */
Blotre.prototype.getStreamStatus := \id options =self->
    self.get("stream/" + id, options);

/**
 * Update the status of a stream.
 */
Blotre.prototype.setStreamStatus := \id body =self->
    self.post("stream/" + id + '/status', body);

/**
 * Get the children of a stream.
 */
Blotre.prototype.getStreamChildren := \id options =self->
    self.get('stream/' + id + '/children', options);

/**
 * Get the child of a stream.
 */
Blotre.prototype.getChild := \streamId childId options =self->
    self.get('stream/' + streamId + '/children/' + childId, options);

/**
 * Add a new child to a stream.
 */
Blotre.prototype.createChild := \streamId childId =self->
    self.put('stream/' + streamId + '/children/' + childId);

/**
 * Remove a child from a stream.
 */
Blotre.prototype.deleteChild := \streamId childId =self->
    self.del('stream/' + streamId + '/children/' + childId);

}
